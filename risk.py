# -*- coding: utf-8 -*-
"""
Created on Wed May 10 12:49:41 2023

@author: Rudy
"""

import pandas as pd
import fsf_renaming as fsf

#Using the fsf_renaming script as a module to read in risk county data with clean column names

flood = fsf.read('flood')
fire = fsf.read('fire')
heat = fsf.read('heat')
wind = fsf.read('wind')

#This function calculates the % of properties at risk for each county
#A property is defined as "at risk" if its risk score is above a specified cutoff point
#Cutoff points for each risk type were determined in a supplemental script
#Using risk %, this function also creates a column called 'risk_level' to categorize risk % into 5 even break points

scores = ["1","2","3","4","5","6","7","8","9","10"]

def risk_calc(risktype,cutoff):
    raw_counties = risktype
    raw_counties[f'>{cutoff}scores_sum'] = 0
    for n in scores[int(cutoff):11]:
        count = raw_counties[n]
        raw_counties[f'>{cutoff}scores_sum'] = raw_counties[f'>{cutoff}scores_sum']+count
    raw_counties['%_at_risk'] = raw_counties[f'>{cutoff}scores_sum']/raw_counties['count_property']*100
    raw_counties['risk_level'] = pd.cut(raw_counties['%_at_risk'],[-1,20,40,60,80,100],labels=[1,2,3,4,5])
    return raw_counties

#Applying the function to the four types of risks and creating csv files of the resulting data
flood = risk_calc(flood,'1')
fire = risk_calc(fire,'2')
heat = risk_calc(heat,'1')
wind = risk_calc(wind,'2')

all_risks = [(flood,'flood'),(fire,'fire'),(heat,'heat'),(wind,'wind')]


for risk,name in all_risks:
    risk.to_csv(f'{name}_risk.csv',index=False)



